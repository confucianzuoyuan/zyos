;=============================================================================
; @file     memcpy.asm
; @brief    将一片内存拷贝到另一片内存
;=============================================================================

bits 64

section .text

    global memcpy


;-----------------------------------------------------------------------------
; @function     memcpy
; @brief        将一片内存中的字节拷贝到另一片内存
; @details      如果内存区域重叠了，那么本函数是UB(未定义行为)
; @reg[in]      rdi     目标内存区域的起始地址
; @reg[in]      rsi     源内存区域的起始地址
; @reg[in]      rdx     待拷贝字节数
; @reg[out]     rax     目标内存区域的起始地址
; @killedregs   rcx
;-----------------------------------------------------------------------------
memcpy:

    ; 保存目标内存区域的起始地址，因为我们要返回它，x86的返回值一般保存在rax寄存器中。
    mov     rax,    rdi

    ; 逐字节拷贝。在现代x86芯片上，逐字节(byte-wise)拷贝和逐字(word-wise)拷贝的性能差不多。
    ; 事实上，某些情况下，movsb可能更快。
    ; movsb: 从rsi保存的内存地址指向的字节复制到rdi保存的地址指向的字节，然后rsi++和rdi++
    ; rep重复rcx中存储的次数
    mov     rcx,    rdx
    rep     movsb

    ret
